/*
 * generated by Xtext 2.25.0
 */
package miniproject.dsl.markdown.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import miniproject.dsl.markdown.ide.contentassist.antlr.internal.InternalMarkdownDSLParser;
import miniproject.dsl.markdown.services.MarkdownDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MarkdownDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MarkdownDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MarkdownDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDocumentAccess().getAlternatives(), "rule__Document__Alternatives");
			builder.put(grammarAccess.getTextAccess().getAlternatives(), "rule__Text__Alternatives");
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getHeadingAccess().getAlternatives(), "rule__Heading__Alternatives");
			builder.put(grammarAccess.getListsAccess().getAlternatives(), "rule__Lists__Alternatives");
			builder.put(grammarAccess.getHeadingAccess().getGroup_0(), "rule__Heading__Group_0__0");
			builder.put(grammarAccess.getHeadingAccess().getGroup_1(), "rule__Heading__Group_1__0");
			builder.put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
			builder.put(grammarAccess.getBoldAccess().getGroup(), "rule__Bold__Group__0");
			builder.put(grammarAccess.getItalicAccess().getGroup(), "rule__Italic__Group__0");
			builder.put(grammarAccess.getStrikethroughAccess().getGroup(), "rule__Strikethrough__Group__0");
			builder.put(grammarAccess.getUnorderedAccess().getGroup(), "rule__Unordered__Group__0");
			builder.put(grammarAccess.getOrderedAccess().getGroup(), "rule__Ordered__Group__0");
			builder.put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup_2(), "rule__Table__Group_2__0");
			builder.put(grammarAccess.getThrAccess().getGroup(), "rule__Thr__Group__0");
			builder.put(grammarAccess.getTbodyAccess().getGroup(), "rule__Tbody__Group__0");
			builder.put(grammarAccess.getHorizonruleAccess().getGroup(), "rule__Horizonrule__Group__0");
			builder.put(grammarAccess.getEmoticonAccess().getGroup(), "rule__Emoticon__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementAssignment(), "rule__Model__ElementAssignment");
			builder.put(grammarAccess.getDocumentAccess().getTextsAssignment_0(), "rule__Document__TextsAssignment_0");
			builder.put(grammarAccess.getDocumentAccess().getEntitiesAssignment_1(), "rule__Document__EntitiesAssignment_1");
			builder.put(grammarAccess.getTextAccess().getHeadingsAssignment_0(), "rule__Text__HeadingsAssignment_0");
			builder.put(grammarAccess.getTextAccess().getParagraphsAssignment_1(), "rule__Text__ParagraphsAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getBlockquotesAssignment_0(), "rule__Entity__BlockquotesAssignment_0");
			builder.put(grammarAccess.getEntityAccess().getImagesAssignment_1(), "rule__Entity__ImagesAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getTablesAssignment_2(), "rule__Entity__TablesAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getListsAssignment_3(), "rule__Entity__ListsAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getHorizonrulesAssignment_4(), "rule__Entity__HorizonrulesAssignment_4");
			builder.put(grammarAccess.getEntityAccess().getEmoticonsAssignment_5(), "rule__Entity__EmoticonsAssignment_5");
			builder.put(grammarAccess.getHeadingAccess().getH1sAssignment_0_1(), "rule__Heading__H1sAssignment_0_1");
			builder.put(grammarAccess.getHeadingAccess().getH2sAssignment_1_1(), "rule__Heading__H2sAssignment_1_1");
			builder.put(grammarAccess.getParagraphAccess().getContentAssignment_0(), "rule__Paragraph__ContentAssignment_0");
			builder.put(grammarAccess.getParagraphAccess().getBoldtextAssignment_1(), "rule__Paragraph__BoldtextAssignment_1");
			builder.put(grammarAccess.getParagraphAccess().getItalictextAssignment_2(), "rule__Paragraph__ItalictextAssignment_2");
			builder.put(grammarAccess.getParagraphAccess().getTextstrikeAssignment_3(), "rule__Paragraph__TextstrikeAssignment_3");
			builder.put(grammarAccess.getPlaintextAccess().getContentAssignment(), "rule__Plaintext__ContentAssignment");
			builder.put(grammarAccess.getBoldAccess().getContentAssignment_1(), "rule__Bold__ContentAssignment_1");
			builder.put(grammarAccess.getItalicAccess().getContentAssignment_1(), "rule__Italic__ContentAssignment_1");
			builder.put(grammarAccess.getStrikethroughAccess().getContentAssignment_1(), "rule__Strikethrough__ContentAssignment_1");
			builder.put(grammarAccess.getListsAccess().getOlAssignment_0(), "rule__Lists__OlAssignment_0");
			builder.put(grammarAccess.getListsAccess().getUlAssignment_1(), "rule__Lists__UlAssignment_1");
			builder.put(grammarAccess.getUnorderedAccess().getTypeAssignment_0(), "rule__Unordered__TypeAssignment_0");
			builder.put(grammarAccess.getUnorderedAccess().getContentAssignment_1(), "rule__Unordered__ContentAssignment_1");
			builder.put(grammarAccess.getUnorderedAccess().getBoldtextAssignment_2(), "rule__Unordered__BoldtextAssignment_2");
			builder.put(grammarAccess.getUnorderedAccess().getItalictextAssignment_3(), "rule__Unordered__ItalictextAssignment_3");
			builder.put(grammarAccess.getUnorderedAccess().getTextstrikeAssignment_4(), "rule__Unordered__TextstrikeAssignment_4");
			builder.put(grammarAccess.getOrderedAccess().getTypeAssignment_0(), "rule__Ordered__TypeAssignment_0");
			builder.put(grammarAccess.getOrderedAccess().getContentAssignment_1(), "rule__Ordered__ContentAssignment_1");
			builder.put(grammarAccess.getOrderedAccess().getBoldtextAssignment_2(), "rule__Ordered__BoldtextAssignment_2");
			builder.put(grammarAccess.getOrderedAccess().getItalictextAssignment_3(), "rule__Ordered__ItalictextAssignment_3");
			builder.put(grammarAccess.getOrderedAccess().getTextstrikeAssignment_4(), "rule__Ordered__TextstrikeAssignment_4");
			builder.put(grammarAccess.getBlockquoteAccess().getBlockAssignment(), "rule__Blockquote__BlockAssignment");
			builder.put(grammarAccess.getImageAccess().getNameAssignment_1(), "rule__Image__NameAssignment_1");
			builder.put(grammarAccess.getImageAccess().getUrlAssignment_3(), "rule__Image__UrlAssignment_3");
			builder.put(grammarAccess.getTableAccess().getThrAssignment_0(), "rule__Table__ThrAssignment_0");
			builder.put(grammarAccess.getTableAccess().getTbodyAssignment_4(), "rule__Table__TbodyAssignment_4");
			builder.put(grammarAccess.getThrAccess().getContentAssignment_1(), "rule__Thr__ContentAssignment_1");
			builder.put(grammarAccess.getThrAccess().getBoldtextAssignment_2(), "rule__Thr__BoldtextAssignment_2");
			builder.put(grammarAccess.getThrAccess().getItalictextAssignment_3(), "rule__Thr__ItalictextAssignment_3");
			builder.put(grammarAccess.getThrAccess().getTextstrikeAssignment_4(), "rule__Thr__TextstrikeAssignment_4");
			builder.put(grammarAccess.getTbodyAccess().getContentAssignment_1(), "rule__Tbody__ContentAssignment_1");
			builder.put(grammarAccess.getTbodyAccess().getBoldtextAssignment_2(), "rule__Tbody__BoldtextAssignment_2");
			builder.put(grammarAccess.getTbodyAccess().getItalictextAssignment_3(), "rule__Tbody__ItalictextAssignment_3");
			builder.put(grammarAccess.getTbodyAccess().getTextstrikeAssignment_4(), "rule__Tbody__TextstrikeAssignment_4");
			builder.put(grammarAccess.getHorizonruleAccess().getHrAssignment_0(), "rule__Horizonrule__HrAssignment_0");
			builder.put(grammarAccess.getEmoticonAccess().getContentAssignment_1(), "rule__Emoticon__ContentAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MarkdownDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMarkdownDSLParser createParser() {
		InternalMarkdownDSLParser result = new InternalMarkdownDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MarkdownDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MarkdownDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
