/*
 * generated by Xtext 2.25.0
 */
grammar InternalMarkdownDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package miniproject.dsl.markdown.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package miniproject.dsl.markdown.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import miniproject.dsl.markdown.services.MarkdownDSLGrammarAccess;

}

@parser::members {

 	private MarkdownDSLGrammarAccess grammarAccess;

    public InternalMarkdownDSLParser(TokenStream input, MarkdownDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MarkdownDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementDocumentParserRuleCall_0());
			}
			lv_element_0_0=ruleDocument
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"element",
					lv_element_0_0,
					"miniproject.dsl.markdown.MarkdownDSL.Document");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getTextsTextParserRuleCall_0_0());
				}
				lv_texts_0_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					set(
						$current,
						"texts",
						lv_texts_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getEntitiesEntityParserRuleCall_1_0());
				}
				lv_entities_1_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					set(
						$current,
						"entities",
						lv_entities_1_0,
						"miniproject.dsl.markdown.MarkdownDSL.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTextAccess().getHeadingsHeadingParserRuleCall_0_0());
				}
				lv_headings_0_0=ruleHeading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextRule());
					}
					set(
						$current,
						"headings",
						lv_headings_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Heading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTextAccess().getParagraphsParagraphParserRuleCall_1_0());
				}
				lv_paragraphs_1_0=ruleParagraph
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextRule());
					}
					set(
						$current,
						"paragraphs",
						lv_paragraphs_1_0,
						"miniproject.dsl.markdown.MarkdownDSL.Paragraph");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getBlockquotesBlockquoteParserRuleCall_0_0());
				}
				lv_blockquotes_0_0=ruleBlockquote
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"blockquotes",
						lv_blockquotes_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Blockquote");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getImagesImageParserRuleCall_1_0());
				}
				lv_images_1_0=ruleImage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"images",
						lv_images_1_0,
						"miniproject.dsl.markdown.MarkdownDSL.Image");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getTablesTableParserRuleCall_2_0());
				}
				lv_tables_2_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"tables",
						lv_tables_2_0,
						"miniproject.dsl.markdown.MarkdownDSL.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getListsListsParserRuleCall_3_0());
				}
				lv_lists_3_0=ruleLists
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"lists",
						lv_lists_3_0,
						"miniproject.dsl.markdown.MarkdownDSL.Lists");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getHorizonrulesHorizonruleParserRuleCall_4_0());
				}
				lv_horizonrules_4_0=ruleHorizonrule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"horizonrules",
						lv_horizonrules_4_0,
						"miniproject.dsl.markdown.MarkdownDSL.Horizonrule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getEmoticonsEmoticonParserRuleCall_5_0());
				}
				lv_emoticons_5_0=ruleEmoticon
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"emoticons",
						lv_emoticons_5_0,
						"miniproject.dsl.markdown.MarkdownDSL.Emoticon");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHeading
entryRuleHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadingRule()); }
	iv_ruleHeading=ruleHeading
	{ $current=$iv_ruleHeading.current; }
	EOF;

// Rule Heading
ruleHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='#'
			{
				newLeafNode(otherlv_0, grammarAccess.getHeadingAccess().getNumberSignKeyword_0_0());
			}
			(
				(
					lv_h1s_1_0=RULE_STRING
					{
						newLeafNode(lv_h1s_1_0, grammarAccess.getHeadingAccess().getH1sSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHeadingRule());
						}
						setWithLastConsumed(
							$current,
							"h1s",
							lv_h1s_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_2='##'
			{
				newLeafNode(otherlv_2, grammarAccess.getHeadingAccess().getNumberSignNumberSignKeyword_1_0());
			}
			(
				(
					lv_h2s_3_0=RULE_STRING
					{
						newLeafNode(lv_h2s_3_0, grammarAccess.getHeadingAccess().getH2sSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHeadingRule());
						}
						setWithLastConsumed(
							$current,
							"h2s",
							lv_h2s_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParagraphRule()); }
	iv_ruleParagraph=ruleParagraph
	{ $current=$iv_ruleParagraph.current; }
	EOF;

// Rule Paragraph
ruleParagraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParagraphAccess().getContentPlaintextParserRuleCall_0_0());
				}
				lv_content_0_0=rulePlaintext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParagraphRule());
					}
					add(
						$current,
						"content",
						lv_content_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Plaintext");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getParagraphAccess().getBoldtextBoldParserRuleCall_1_0());
				}
				lv_boldtext_1_0=ruleBold
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParagraphRule());
					}
					add(
						$current,
						"boldtext",
						lv_boldtext_1_0,
						"miniproject.dsl.markdown.MarkdownDSL.Bold");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getParagraphAccess().getItalictextItalicParserRuleCall_2_0());
				}
				lv_italictext_2_0=ruleItalic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParagraphRule());
					}
					add(
						$current,
						"italictext",
						lv_italictext_2_0,
						"miniproject.dsl.markdown.MarkdownDSL.Italic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getParagraphAccess().getTextstrikeStrikethroughParserRuleCall_3_0());
				}
				lv_textstrike_3_0=ruleStrikethrough
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParagraphRule());
					}
					add(
						$current,
						"textstrike",
						lv_textstrike_3_0,
						"miniproject.dsl.markdown.MarkdownDSL.Strikethrough");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePlaintext
entryRulePlaintext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaintextRule()); }
	iv_rulePlaintext=rulePlaintext
	{ $current=$iv_rulePlaintext.current; }
	EOF;

// Rule Plaintext
rulePlaintext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_content_0_0=RULE_STRING
			{
				newLeafNode(lv_content_0_0, grammarAccess.getPlaintextAccess().getContentSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPlaintextRule());
				}
				setWithLastConsumed(
					$current,
					"content",
					lv_content_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBold
entryRuleBold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoldRule()); }
	iv_ruleBold=ruleBold
	{ $current=$iv_ruleBold.current; }
	EOF;

// Rule Bold
ruleBold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='**'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoldAccess().getAsteriskAsteriskKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getBoldAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoldRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='**'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoldAccess().getAsteriskAsteriskKeyword_2());
		}
	)
;

// Entry rule entryRuleItalic
entryRuleItalic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItalicRule()); }
	iv_ruleItalic=ruleItalic
	{ $current=$iv_ruleItalic.current; }
	EOF;

// Rule Italic
ruleItalic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getItalicAccess().getAsteriskKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getItalicAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItalicRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='*'
		{
			newLeafNode(otherlv_2, grammarAccess.getItalicAccess().getAsteriskKeyword_2());
		}
	)
;

// Entry rule entryRuleStrikethrough
entryRuleStrikethrough returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrikethroughRule()); }
	iv_ruleStrikethrough=ruleStrikethrough
	{ $current=$iv_ruleStrikethrough.current; }
	EOF;

// Rule Strikethrough
ruleStrikethrough returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='~~'
		{
			newLeafNode(otherlv_0, grammarAccess.getStrikethroughAccess().getTildeTildeKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getStrikethroughAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStrikethroughRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='~~'
		{
			newLeafNode(otherlv_2, grammarAccess.getStrikethroughAccess().getTildeTildeKeyword_2());
		}
	)
;

// Entry rule entryRuleLists
entryRuleLists returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListsRule()); }
	iv_ruleLists=ruleLists
	{ $current=$iv_ruleLists.current; }
	EOF;

// Rule Lists
ruleLists returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListsAccess().getOlOrderedParserRuleCall_0_0());
				}
				lv_ol_0_0=ruleOrdered
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListsRule());
					}
					set(
						$current,
						"ol",
						lv_ol_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Ordered");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getListsAccess().getUlUnorderedParserRuleCall_1_0());
				}
				lv_ul_1_0=ruleUnordered
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListsRule());
					}
					set(
						$current,
						"ul",
						lv_ul_1_0,
						"miniproject.dsl.markdown.MarkdownDSL.Unordered");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnordered
entryRuleUnordered returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnorderedRule()); }
	iv_ruleUnordered=ruleUnordered
	{ $current=$iv_ruleUnordered.current; }
	EOF;

// Rule Unordered
ruleUnordered returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='*'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getUnorderedAccess().getTypeAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnorderedRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "*");
				}
			)
		)
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getUnorderedAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnorderedRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnorderedRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getUnorderedAccess().getBoldtextBoldCrossReference_2_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnorderedRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getUnorderedAccess().getItalictextItalicCrossReference_3_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnorderedRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getUnorderedAccess().getTextstrikeStrikethroughCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleOrdered
entryRuleOrdered returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedRule()); }
	iv_ruleOrdered=ruleOrdered
	{ $current=$iv_ruleOrdered.current; }
	EOF;

// Rule Ordered
ruleOrdered returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0=RULE_INT
				{
					newLeafNode(lv_type_0_0, grammarAccess.getOrderedAccess().getTypeINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getOrderedAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getOrderedAccess().getBoldtextBoldCrossReference_2_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getOrderedAccess().getItalictextItalicCrossReference_3_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getOrderedAccess().getTextstrikeStrikethroughCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleBlockquote
entryRuleBlockquote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockquoteRule()); }
	iv_ruleBlockquote=ruleBlockquote
	{ $current=$iv_ruleBlockquote.current; }
	EOF;

// Rule Blockquote
ruleBlockquote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_block_0_0='>'
			{
				newLeafNode(lv_block_0_0, grammarAccess.getBlockquoteAccess().getBlockGreaterThanSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBlockquoteRule());
				}
				addWithLastConsumed($current, "block", lv_block_0_0, ">");
			}
		)
	)+
;

// Entry rule entryRuleImage
entryRuleImage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImageRule()); }
	iv_ruleImage=ruleImage
	{ $current=$iv_ruleImage.current; }
	EOF;

// Rule Image
ruleImage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!['
		{
			newLeafNode(otherlv_0, grammarAccess.getImageAccess().getExclamationMarkLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getImageAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=']('
		{
			newLeafNode(otherlv_2, grammarAccess.getImageAccess().getRightSquareBracketLeftParenthesisKeyword_2());
		}
		(
			(
				lv_url_3_0=RULE_STRING
				{
					newLeafNode(lv_url_3_0, grammarAccess.getImageAccess().getUrlSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImageRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getImageAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getThrThrParserRuleCall_0_0());
				}
				lv_thr_0_0=ruleThr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"thr",
						lv_thr_0_0,
						"miniproject.dsl.markdown.MarkdownDSL.Thr");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			('|')=>
			otherlv_1='|'
			{
				newLeafNode(otherlv_1, grammarAccess.getTableAccess().getVerticalLineKeyword_1());
			}
		)
		(
			otherlv_2='|---'
			{
				newLeafNode(otherlv_2, grammarAccess.getTableAccess().getVerticalLineHyphenMinusHyphenMinusHyphenMinusKeyword_2_0());
			}
			(
				otherlv_3='-'
				{
					newLeafNode(otherlv_3, grammarAccess.getTableAccess().getHyphenMinusKeyword_2_1());
				}
			)*
		)+
		(
			('|')=>
			otherlv_4='|'
			{
				newLeafNode(otherlv_4, grammarAccess.getTableAccess().getVerticalLineKeyword_3());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getTbodyTbodyParserRuleCall_4_0());
				}
				lv_tbody_5_0=ruleTbody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"tbody",
						lv_tbody_5_0,
						"miniproject.dsl.markdown.MarkdownDSL.Tbody");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			('|')=>
			otherlv_6='|'
			{
				newLeafNode(otherlv_6, grammarAccess.getTableAccess().getVerticalLineKeyword_5());
			}
		)
	)
;

// Entry rule entryRuleThr
entryRuleThr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThrRule()); }
	iv_ruleThr=ruleThr
	{ $current=$iv_ruleThr.current; }
	EOF;

// Rule Thr
ruleThr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getThrAccess().getVerticalLineKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getThrAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThrRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThrRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getThrAccess().getBoldtextBoldCrossReference_2_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThrRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getThrAccess().getItalictextItalicCrossReference_3_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThrRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getThrAccess().getTextstrikeStrikethroughCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleTbody
entryRuleTbody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTbodyRule()); }
	iv_ruleTbody=ruleTbody
	{ $current=$iv_ruleTbody.current; }
	EOF;

// Rule Tbody
ruleTbody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getTbodyAccess().getVerticalLineKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getTbodyAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTbodyRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTbodyRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getTbodyAccess().getBoldtextBoldCrossReference_2_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTbodyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTbodyAccess().getItalictextItalicCrossReference_3_0());
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTbodyRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getTbodyAccess().getTextstrikeStrikethroughCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleHorizonrule
entryRuleHorizonrule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHorizonruleRule()); }
	iv_ruleHorizonrule=ruleHorizonrule
	{ $current=$iv_ruleHorizonrule.current; }
	EOF;

// Rule Horizonrule
ruleHorizonrule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_hr_0_0='---'
				{
					newLeafNode(lv_hr_0_0, grammarAccess.getHorizonruleAccess().getHrHyphenMinusHyphenMinusHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHorizonruleRule());
					}
					setWithLastConsumed($current, "hr", lv_hr_0_0, "---");
				}
			)
		)
		(
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getHorizonruleAccess().getHyphenMinusKeyword_1());
			}
		)*
	)
;

// Entry rule entryRuleEmoticon
entryRuleEmoticon returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmoticonRule()); }
	iv_ruleEmoticon=ruleEmoticon
	{ $current=$iv_ruleEmoticon.current; }
	EOF;

// Rule Emoticon
ruleEmoticon returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getEmoticonAccess().getColonKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getEmoticonAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmoticonRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getEmoticonAccess().getColonKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
